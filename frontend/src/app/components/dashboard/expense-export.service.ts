import { Injectable } from '@angular/core';
import { Expense } from '../../services/expense.service';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import * as ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';
import { format } from 'date-fns';

@Injectable({
  providedIn: 'root',
})
export class ExpenseExportService {
  downloadPDF(expenses: Expense[]): void {
    const doc = new jsPDF();
    const marginX = 20;
    const pageWidth = doc.internal.pageSize.getWidth();

    // Title & branding
    doc.setFontSize(22);
    doc.setTextColor(52, 144, 220);
    doc.text('SpendWise', marginX, 25);

    doc.setFontSize(16);
    doc.setTextColor(100, 100, 100);
    doc.text('Expense Report', marginX, 35);

    // Date
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, marginX, 45);

    // Separator line
    doc.setDrawColor(200, 200, 200);
    doc.line(marginX, 50, pageWidth - marginX, 50);

    // Summary Box
    const totalAmount = expenses.reduce((sum, e) => sum + e.amount, 0);
    doc.setFillColor(248, 249, 250);
    doc.rect(marginX, 55, pageWidth - 2 * marginX, 20, 'F');

    doc.setFontSize(12);
    doc.setTextColor(51, 51, 51);
    doc.text('Summary:', marginX + 5, 65);
    doc.text(`Total Expenses: ${totalAmount.toLocaleString()}`, marginX + 5, 72);
    doc.text(`Number of Expenses: ${expenses.length}`, pageWidth - marginX - 60, 72);

    // Table
    autoTable(doc, {
      head: [['Date', 'Type', 'Category', 'Amount', 'Description']],
      body: expenses.map((e) => [
        this.formatDate(e.date),
        e.type,
        e.category,
        `${e.amount.toLocaleString()}`,
        e.description,
      ]),
      startY: 85,
      theme: 'grid',
      margin: { left: marginX, right: marginX },
      headStyles: {
        fillColor: [52, 144, 220],
        textColor: [255, 255, 255],
        fontStyle: 'bold',
        fontSize: 11,
        halign: 'center',
        minCellHeight: 6,
      },
      bodyStyles: {
        fontSize: 10,
        cellPadding: 3,
        valign: 'middle',
      },
      alternateRowStyles: {
        fillColor: [248, 249, 250],
      },
      columnStyles: {
        0: { halign: 'center', cellWidth: 35 },
        1: { halign: 'center', cellWidth: 35 },
        2: { halign: 'center', cellWidth: 35 },
        3: { halign: 'right', cellWidth: 30 },
        4: { halign: 'left', cellWidth: 'auto' },
      },
      styles: {
        lineColor: [200, 200, 200],
        lineWidth: 0.5,
        overflow: 'linebreak',
      },
    });

    // Footer on each page
    const pageCount = doc.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(128, 128, 128);
      doc.text(`Page ${i} of ${pageCount}`, marginX, doc.internal.pageSize.height - 10);
      doc.text('Generated by SpendWise', pageWidth - marginX - 45, doc.internal.pageSize.height - 10);
    }

    // Save
    const dateStr = new Date().toISOString().split('T')[0];
    doc.save(`SpendWise_Report_${dateStr}.pdf`);
  }

  downloadExcel(expenses: Expense[]): void {
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('Expenses');

    // Brand colors
    const blue = '348cdc';
    const lightGray = 'f8f9fa';
    const darkText = '333333';

    // Title: SpendWise
    worksheet.mergeCells('A1:E1');
    const titleCell = worksheet.getCell('A1');
    titleCell.value = 'SpendWise';
    titleCell.font = { size: 20, bold: true, color: { argb: blue } };
    titleCell.alignment = { vertical: 'middle', horizontal: 'center' };

    // Subtitle: Expense Report
    worksheet.mergeCells('A2:E2');
    const subtitleCell = worksheet.getCell('A2');
    subtitleCell.value = 'Expense Report';
    subtitleCell.font = { size: 14, color: { argb: darkText } };
    titleCell.alignment = { vertical: 'middle', horizontal: 'center' };
    subtitleCell.alignment = { vertical: 'middle', horizontal: 'center' };

    // Generated on date
    worksheet.mergeCells('A3:E3');
    const dateCell = worksheet.getCell('A3');
    dateCell.value = `Generated on: ${new Date().toLocaleDateString()}`;
    dateCell.font = { size: 10, italic: true, color: { argb: '666666' } };
    dateCell.alignment = { horizontal: 'center' };

    worksheet.addRow([]);

    // Summary row
    const totalAmount = expenses.reduce((sum, e) => sum + e.amount, 0);
    const summaryRow = worksheet.addRow([
      'Summary',
      '',
      '',
      `Total Expenses: ${totalAmount.toLocaleString()}`,
      `Number of Expenses: ${expenses.length}`,
    ]);
    summaryRow.font = { bold: true };
    summaryRow.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: lightGray } };
    worksheet.addRow([]);

    // Table Header
    const header = ['Date', 'Type', 'Category', 'Amount', 'Description'];
    const headerRow = worksheet.addRow(header);
    headerRow.eachCell((cell) => {
      cell.font = { bold: true, color: { argb: 'FFFFFF' } };
      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: blue } };
      cell.alignment = { horizontal: 'center' };
      cell.border = {
        top: { style: 'thin' },
        bottom: { style: 'thin' },
        left: { style: 'thin' },
        right: { style: 'thin' },
      };
    });

    // Table Body
    expenses.forEach((e) => {
      const row = worksheet.addRow([this.formatDate(e.date), e.type, e.category, e.amount, e.description]);
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin' },
          bottom: { style: 'thin' },
          left: { style: 'thin' },
          right: { style: 'thin' },
        };
        cell.alignment = {
          vertical: 'middle',
          horizontal: colNumber === 4 ? 'right' : 'center',
        };
      });
    });

    // Auto-fit columns
    if (worksheet.columns) {
      worksheet.columns.forEach((column) => {
        let maxLength = 12;
        column.eachCell?.({ includeEmpty: true }, (cell) => {
          const columnLength = cell.value ? cell.value.toString().length : 10;
          maxLength = Math.max(maxLength, columnLength);
        });
        column.width = maxLength + 2;
      });
    }

    // Save file
    workbook.xlsx.writeBuffer().then((data) => {
      const blob = new Blob([data], { type: 'application/octet-stream' });
      const dateStr = new Date().toISOString().split('T')[0];
      saveAs(blob, `SpendWise_Report_${dateStr}.xlsx`);
    });
  }

  private formatDate(date: string): string {
    return format(new Date(date), 'd MMMM yyyy');
  }
}
